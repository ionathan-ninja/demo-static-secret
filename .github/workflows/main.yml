#name: Fetch Static Secrets example

#'on': push

#jobs:

#  fetch_secrets:
#    runs-on: self-hosted
#    permissions:
#      id-token: write
#      contents: read

#    steps:
    
#    - name: Fetch static secrets from Akeyless
#      uses: akeyless-community/akeyless-github-action@v1.0.1
#      id: fetch-secrets
#      with:
#        access-id: '${{ secrets.ACCESS_ID }}'
#        access-type: jwt
#        export-secrets-to-outputs: true
#        export-secrets-to-environment: true
#        static-secrets: |
#          - name: "/github_actions/demo_static_secret"
#            output-name: "my_first_secret"
#        api-url: "https://csm.thalescryptolabs.com/akeyless-api/v2/"

#    - name: Use Akeyless secret (environment variable)
#      env:
#        SECRET: ${{ env.my_first_secret }}
#      run: |
#        # Use the secret securely within this step
#        echo "Doing something with $SECRET"
#    - name: Use Akeyless secret (step output)
#      run: |
#        # Use the secret securely within this step
#        echo "Doing something with ${{ steps.fetch-secrets.outputs.my_first_secret }}"

############################################################################################

name: Fetch Postgres Dynamic Secrets

on: push

jobs:

  fetch_postgres_dynamic_secrets:
    runs-on: self-hosted
    name: Fetch Postgres Dynamic Secrets
    permissions:
      id-token: write
      contents: read

    steps:
    
    - name: Fetch dynamic secrets from Akeyless
      id: fetch-dynamic-secrets
      uses: akeyless-community/akeyless-github-action@v1.0.1
      with:
        access-id: ${{ secrets.ACCESS_ID }}
        dynamic-secrets: |
          - name: "/github_actions/postgres_DS"
            output-name: "postgres_dynamic_secret"
        access-type: jwt
        export-secrets-to-outputs: true
        export-secrets-to-environment: true
        api-url: "https://csm.thalescryptolabs.com/akeyless-api/v2/"

    # ***** KEY TAKEAWAY *****
    #
    # STEP 1 - Export Dynamic Secret's keys to env vars
    - name: Export Secrets to Environment
      run: |
        echo '${{ steps.fetch-dynamic-secrets.outputs.postgres_dynamic_secret }}' | jq -r 'to_entries|map("POSTGRES_\(.key|ascii_upcase)=\(.value|tostring)")|.[]' >> $GITHUB_ENV
    # STEP 2 - You can now access each secret separately as environment variables
    #- name: Verify Vars
    #  run: |
    #    echo "host: ${{ env.POSTGRES_HOST }}" >> secrets.txt
    #    echo "port: ${{ env.POSTGRES_PORT }}" >> secrets.txt
    #    echo "username: ${{ env.POSTGRES_USERNAME }}" >> secrets.txt
    #    echo "password: ${{ env.POSTGRES_PASSWORD }}" >> secrets.txt
    #    echo "db_name: ${{ env.POSTGRES_DB_NAME }}" >> secrets.txt
    #    echo "ttl_in_minutes: ${{ env.POSTGRES_TTL_IN_MINUTES }}" >> secrets.txt 

    - name: Install PostgreSQL Client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Update PostgreSQL Table
      env:
        DB_NAME: postgres
        DB_HOST: ${{ env.POSTGRES_HOST }}
        DB_PORT: ${{ env.POSTGRES_PORT }}
        DB_USER: ${{ env.POSTGRES_USERNAME }}
        DB_PASS: ${{ env.POSTGRES_PASSWORD }}
      run: |
        # The SQL command to update the table. You should replace this with your actual SQL command.
        SQL_COMMAND="INSERT INTO public.people (First_Name, Last_Name) VALUES ('Berry', 'Tzakala');"

        # Use PGPASSWORD to pass the password, then run psql to execute your SQL command
        export PGPASSWORD=$DB_PASS
        psql -h "$DB_HOST" -p "$DB_PORT" -d "$DB_NAME" -U "$DB_USER" -c "$SQL_COMMAND"

        # Unset the PGPASSWORD after use for security reasons
        unset PGPASSWORD
############################################################################################

